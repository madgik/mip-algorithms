Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS term
Rule 2     expression -> term
Rule 3     term -> NUMBER
Rule 4     term -> VAR
Rule 5     term -> STAR STARARG
Rule 6     term -> LPAREN STAR STARARG RPAREN
Rule 7     term -> LPAREN STAR STARARG RPAREN HAT CROSS_LIMIT
Rule 8     term -> factor COLON VAR
Rule 9     factor -> factor COLON VAR
Rule 10    factor -> VAR

Terminals, with rules where they appear

COLON                : 8 9
CROSS_LIMIT          : 7
HAT                  : 7
LPAREN               : 6 7
NUMBER               : 3
PLUS                 : 1
RPAREN               : 6 7
STAR                 : 5 6 7
STARARG              : 5 6 7
VAR                  : 4 8 9 10
error                : 

Nonterminals, with rules where they appear

expression           : 1 0
factor               : 8 9
term                 : 1 2

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS term
    (2) expression -> . term
    (3) term -> . NUMBER
    (4) term -> . VAR
    (5) term -> . STAR STARARG
    (6) term -> . LPAREN STAR STARARG RPAREN
    (7) term -> . LPAREN STAR STARARG RPAREN HAT CROSS_LIMIT
    (8) term -> . factor COLON VAR
    (9) factor -> . factor COLON VAR
    (10) factor -> . VAR

    NUMBER          shift and go to state 3
    VAR             shift and go to state 4
    STAR            shift and go to state 5
    LPAREN          shift and go to state 6

    expression                     shift and go to state 1
    term                           shift and go to state 2
    factor                         shift and go to state 7

state 1

    (0) S' -> expression .
    (1) expression -> expression . PLUS term

    PLUS            shift and go to state 8


state 2

    (2) expression -> term .

    PLUS            reduce using rule 2 (expression -> term .)
    $end            reduce using rule 2 (expression -> term .)


state 3

    (3) term -> NUMBER .

    PLUS            reduce using rule 3 (term -> NUMBER .)
    $end            reduce using rule 3 (term -> NUMBER .)


state 4

    (4) term -> VAR .
    (10) factor -> VAR .

    PLUS            reduce using rule 4 (term -> VAR .)
    $end            reduce using rule 4 (term -> VAR .)
    COLON           reduce using rule 10 (factor -> VAR .)


state 5

    (5) term -> STAR . STARARG

    STARARG         shift and go to state 9


state 6

    (6) term -> LPAREN . STAR STARARG RPAREN
    (7) term -> LPAREN . STAR STARARG RPAREN HAT CROSS_LIMIT

    STAR            shift and go to state 10


state 7

    (8) term -> factor . COLON VAR
    (9) factor -> factor . COLON VAR

    COLON           shift and go to state 11


state 8

    (1) expression -> expression PLUS . term
    (3) term -> . NUMBER
    (4) term -> . VAR
    (5) term -> . STAR STARARG
    (6) term -> . LPAREN STAR STARARG RPAREN
    (7) term -> . LPAREN STAR STARARG RPAREN HAT CROSS_LIMIT
    (8) term -> . factor COLON VAR
    (9) factor -> . factor COLON VAR
    (10) factor -> . VAR

    NUMBER          shift and go to state 3
    VAR             shift and go to state 4
    STAR            shift and go to state 5
    LPAREN          shift and go to state 6

    term                           shift and go to state 12
    factor                         shift and go to state 7

state 9

    (5) term -> STAR STARARG .

    PLUS            reduce using rule 5 (term -> STAR STARARG .)
    $end            reduce using rule 5 (term -> STAR STARARG .)


state 10

    (6) term -> LPAREN STAR . STARARG RPAREN
    (7) term -> LPAREN STAR . STARARG RPAREN HAT CROSS_LIMIT

    STARARG         shift and go to state 13


state 11

    (8) term -> factor COLON . VAR
    (9) factor -> factor COLON . VAR

    VAR             shift and go to state 14


state 12

    (1) expression -> expression PLUS term .

    PLUS            reduce using rule 1 (expression -> expression PLUS term .)
    $end            reduce using rule 1 (expression -> expression PLUS term .)


state 13

    (6) term -> LPAREN STAR STARARG . RPAREN
    (7) term -> LPAREN STAR STARARG . RPAREN HAT CROSS_LIMIT

    RPAREN          shift and go to state 15


state 14

    (8) term -> factor COLON VAR .
    (9) factor -> factor COLON VAR .

    PLUS            reduce using rule 8 (term -> factor COLON VAR .)
    $end            reduce using rule 8 (term -> factor COLON VAR .)
    COLON           reduce using rule 9 (factor -> factor COLON VAR .)


state 15

    (6) term -> LPAREN STAR STARARG RPAREN .
    (7) term -> LPAREN STAR STARARG RPAREN . HAT CROSS_LIMIT

    PLUS            reduce using rule 6 (term -> LPAREN STAR STARARG RPAREN .)
    $end            reduce using rule 6 (term -> LPAREN STAR STARARG RPAREN .)
    HAT             shift and go to state 16


state 16

    (7) term -> LPAREN STAR STARARG RPAREN HAT . CROSS_LIMIT

    CROSS_LIMIT     shift and go to state 17


state 17

    (7) term -> LPAREN STAR STARARG RPAREN HAT CROSS_LIMIT .

    PLUS            reduce using rule 7 (term -> LPAREN STAR STARARG RPAREN HAT CROSS_LIMIT .)
    $end            reduce using rule 7 (term -> LPAREN STAR STARARG RPAREN HAT CROSS_LIMIT .)

